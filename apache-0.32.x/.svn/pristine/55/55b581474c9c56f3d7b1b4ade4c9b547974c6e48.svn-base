<?xml version="1.0" encoding="utf-8"?>
<!--

 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.

-->

<section id="Java-Broker-Management-Channel-REST-API">
  <title>REST API</title>
  <para> This section provides a brief overview of the REST interface, which can be used directly to
    monitor and manage the Broker instance.</para>

  <para>The REST interface support traditional REST model which uses the GET method requests to
    retrieve the information about broker configured objects, DELETE method requests to delete the
    configured object, PUT to create or update the configured object and POST to perform the
    configured objects updates not available with the PUT requests.</para>
  <para>The REST API is versioned with the version number built into the URL. The general form of
    the URL is <literal>/api/&lt;version&gt;</literal>. For convenience the alias
      <literal>latest</literal> signifies the latest supported version. There are also some
    ancillary services prefixed by <literal>/service</literal>.</para>

  <para>The table below lists the available REST services with brief description how they can be
    used.</para>

  <table>
    <title>Rest services</title>
    <tgroup cols="6">
      <thead>
        <row>
          <entry>REST Service URL</entry>
          <entry>Description</entry>
          <entry>GET</entry>
          <entry>PUT</entry>
          <entry>POST</entry>
          <entry>DELETE</entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/broker</para>
          </entry>
          <entry>
            <para>Rest service to manage broker instance</para>
          </entry>
          <entry>
            <para>Retrieves the details of broker configuration</para>
          </entry>
          <entry>
            <para>Updates broker attributes</para>
          </entry>
          <entry>
            <para>Not implemented yet</para>
          </entry>
          <entry>
            <para>Not implemented yet</para>
          </entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/authenticationprovider</para>
            <para>/api/&lt;ver&gt;/authenticationprovider/&lt;authentication provider
              name&gt;</para>
          </entry>
          <entry>Rest service to manage authentication providers on the broker</entry>
          <entry>Retrieves the details about authentication providers</entry>
          <entry>Creates or updates authentication providers</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes authentication providers</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/accesscontrolprovider</para>
          </entry>
          <entry>Rest service to manage access control providers</entry>
          <entry>Retrieves the details about access control providers</entry>
          <entry>Creates access control provider</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes access control provider(s)</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/user</para>
            <para>/api/&lt;ver&gt;/user/&lt;authentication provider name&gt;/&lt;user
              name&gt;</para>
          </entry>
          <entry>Rest service to manage user account</entry>
          <entry>Retrieves the details about user account</entry>
          <entry>Creates user account, updates user password</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes user account</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/groupprovider</para>
            <para>/api/&lt;ver&gt;/groupprovider/&lt;group provider name&gt;</para>
          </entry>
          <entry>Rest service to manage group providers</entry>
          <entry>Retrieves the details about group provider(s)</entry>
          <entry>Creates group provider</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes groups providers</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/group</para>
            <para>/api/&lt;ver&gt;/group/&lt;group provider name&gt;/&lt;group name&gt;</para>
          </entry>
          <entry>Rest service to manage user group</entry>
          <entry>Retrieves the details about user group</entry>
          <entry>Creates group</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes group</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/groupmember</para>
            <para>/api/&lt;ver&gt;/groupmember/&lt;group provider name &gt;/&lt;group
              name&gt;/&lt;user name&gt;</para>
          </entry>
          <entry>Rest service to manage group member(s)</entry>
          <entry>Retrieves the details about group member(s)</entry>
          <entry>Add user to group</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes user from group</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/port</para>
            <para>/api/&lt;ver&gt;/port/&lt;port name&gt;</para>
          </entry>
          <entry>Rest service to manage broker ports(s)</entry>
          <entry>Retrieves the details about the broker port(s)</entry>
          <entry>Creates or updates port</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes ports</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/keystore</para>
          </entry>
          <entry>Rest service to manage KeyStores</entry>
          <entry>Retrieves the details about KeyStore</entry>
          <entry>Creates or updates KeyStore</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes KeyStore(s)</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/truststore</para>
          </entry>
          <entry>Rest service to manage TrustStore</entry>
          <entry>Retrieves the details about TrustStore</entry>
          <entry>Creates or updates TrustStore</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes TrustStore(s)</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/plugin</para>
          </entry>
          <entry>Rest service to manage plugins</entry>
          <entry>Retrieves the details about plugins</entry>
          <entry>Updates plugin attributes</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/virtualhostnode</para>
            <para>/api/&lt;ver&gt;/virtualhostnode/&lt;virtualhostnode name&gt;</para>
          </entry>
          <entry>Rest service to manage virtualhost node(s)</entry>
          <entry>Retrieves the details about the virtualhost node(s)</entry>
          <entry>Creates/Updates virtualhost node</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes virtualhost node</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/virtualhost</para>
            <para>/api/&lt;ver&gt;/virtualhost/&lt;virtualhostnode name&gt;/&lt;virtualhost
              name&gt;</para>
          </entry>
          <entry>Rest service to manage virtualhost(s)</entry>
          <entry>Retrieves the details about the virtualhost(s)</entry>
          <entry>Creates/Updates virtualhost</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes virtualhost</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/queue</para>
            <para>/api/&lt;ver&gt;/queue/&lt;virtualhostnode name&gt;/&lt;virtualhost
              name&gt;/&lt;queue name&gt;</para>
          </entry>
          <entry>Rest service to manage queue(s)</entry>
          <entry>Retrieves the details about the queue(s)</entry>
          <entry>Creates queue</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes queue</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/exchange</para>
            <para>/api/&lt;ver&gt;/exchange/&lt;virtualhostnode name&gt;/&lt;virtualhost
              name&gt;/&lt;exchange name&gt;</para>
          </entry>
          <entry>Rest service to manage exchange(s)</entry>
          <entry>Retrieves the details about the exchange(s)</entry>
          <entry>Creates exchange</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes exchange</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/binding</para>
            <para>/api/&lt;ver&gt;/binding/&lt;virtualhostnode name&gt;/&lt;virtualhost
              name&gt;/&lt;exchange name&gt;/&lt;queue name&gt;/&lt;binding name&gt;</para>
          </entry>
          <entry>Rest service to manage binding(s)</entry>
          <entry>Retrieves the details about the binding(s)</entry>
          <entry>Binds a queue to an exchange</entry>
          <entry>Not implemented yet</entry>
          <entry>Deletes binding</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/connection</para>
            <para>/api/&lt;ver&gt;/connection/&lt;virtualhostnode name&gt;/&lt;virtualhost
              name&gt;/&lt;connection name&gt;</para>
          </entry>
          <entry>Rest service to manage connection(s)</entry>
          <entry>Retrieves the details about the connection(s)</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
        </row>
        <row>
          <entry>
            <para>/api/&lt;ver&gt;/session</para>
            <para>/api/&lt;ver&gt;/session/&lt;virtualhostnode name&gt;/&lt;virtualhost
              name&gt;/&lt;connection name&gt;/&lt;session name&gt;</para>
          </entry>
          <entry>Rest service to manage session(s)</entry>
          <entry>Retrieves the details about the session(s)</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
        </row>
        <row>
          <entry>
            <para>/service/message/&lt;virtualhost name&gt;/&lt;queue name&gt;</para>
          </entry>
          <entry>Rest service to manage messages(s)</entry>
          <entry>Retrieves the details about the messages(s)</entry>
          <entry>Not implemented yet</entry>
          <entry>Copies, moves messages</entry>
          <entry>Deletes messages</entry>
        </row>
        <row>
          <entry>
            <para>/service/message-content/&lt;virtualhost name&gt;/&lt;queue name&gt;</para>
          </entry>
          <entry>Rest service to retrieve message content</entry>
          <entry>Retrieves the message content</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
        </row>
        <row>
          <entry>
            <para>/service/logrecords</para>
          </entry>
          <entry>Rest service to retrieve broker logs</entry>
          <entry>Retrieves the broker logs</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
        </row>
        <row>
          <entry>
            <para>/service/sasl</para>
          </entry>
          <entry>Sasl authentication</entry>
          <entry>Retrieves user current authentication status and broker supported SASL
            mechanisms</entry>
          <entry>Authenticates user using supported SASL mechanisms</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
        </row>
        <row>
          <entry>
            <para>/service/logout</para>
          </entry>
          <entry>Log outs</entry>
          <entry>Log outs user</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
          <entry>Not implemented yet</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
  <para>The REST URLs are hierarchical. It is permitted to replace rest URL elements with an
    "asterisks" in GET requests to denote all object of a particular type. Additionally, trailing
    object type in the URL hierarchy can be omitted. In this case GET request will return all of the
    object underneath of the current object.</para>
  <para>For example, for binding URL <literal>http://localhost:8080/api/latest/binding/&lt;vhost
      node&gt;/&lt;vhost&gt;/&lt;exchange&gt;/&lt;queue&gt;/&lt;binding&gt;</literal> replacing of
      <literal>&lt;exchange&gt;</literal> with "asterisks"
      (<literal>http://localhost:8080/api/&lt;ver&gt;/binding/&lt;vhost
      node&gt;/&lt;vhost&gt;/*/&lt;queue&gt;/&lt;binding&gt;</literal>) will result in the GET
    response containing the list of bindings for all of the exchanges in the virtualhost having the
    given name and given queue.</para>
  <para>If <literal>&lt;binding&gt;</literal> and <literal>&lt;queue&gt;</literal> are omitted in
    binding REST URL (<literal>http://localhost:8080/api/&lt;ver&gt;/binding/&lt;vhost
      node&gt;/&lt;vhost&gt;/&lt;exchangename&gt;</literal>) the GET request will result in
    returning all bindings for all queues for the given exchange in the virtual host. </para>
  <example>
    <title>Examples of queue creation using curl (authenticating as user admin):</title>
    <programlisting><![CDATA[
#create a durable queue
curl --user admin -X PUT  -d '{"durable":true}' http://localhost:8080/api/latest/queue/<vhostnode name>/<vhostname>/<queuename>
#create a durable priority queue
curl --user admin -X PUT  -d '{"durable":true,"type":"priority"}' http://localhost:8080/api/latest/queue/<vhostnode name>/<vhostname>/<queuename>
            ]]></programlisting>
  </example>
  <example>
    <title>Example of binding a queue to an exchange using curl</title>
    <programlisting><![CDATA[
curl --user admin -X PUT  -d '{}' http://localhost:8080/api/latest/binding/<vhostnode name>/<vhostname>/<exchangename>/<queue-name>/<binding-name>
            ]]></programlisting>
  </example>
  <para> NOTE: These curl examples utilise unsecure HTTP transport. To use the examples it is first
    necessary enable Basic authentication for HTTP within the HTTP Management Configuration (it is
    off by default). For details see <xref linkend="Java-Broker-Management-Managing-Plugin-HTTP"/>
  </para>
</section>
